<templateSet group="_CLASS">
  <template name="class mutable new-call pattern 2" value="class $name$(object):&#10;    &quot;&quot;&quot; new-call pattern of class &quot;&quot;&quot;&#10;&#10;    def __init__(self,one,two):&#10;        self._one=one&#10;        self._two=two&#10;        self._age=None&#10;&#10;    @property&#10;    def age(self):&#10;        &quot;&quot;&quot; age &quot;&quot;&quot;&#10;        return self._age&#10;&#10;    @age.setter&#10;    def age(self,value):&#10;        if not value: raise ValueError(&quot;Setter argument must not be empty.&quot;)&#10;        assert isinstance(value,str)&#10;        &#10;        self._age=value&#10;&#10;    def method1(self,arg):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;        assert isinstance(arg,str)&#10; &#10;        print (f&quot;method1:{arg}&quot;)&#10;        &#10;        assert arg , &quot;Check invariant - result is not empty&quot;&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self._one} {self._two}&quot;&#10;&#10;&#10;obj1=$name$(&quot;1&quot;)&#10;obj1.method1(&quot;12&quot;)&#10;$END$" description="new-call pattern 2 with setter" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class oneline" value="class $name$(object): ...&#10;&#10;&#10;obj1=$name$()&#10;$END$" description="my class" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="method 1" value="def method1(self,arg):&#10;    &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;    if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(arg,str)&#10;    &#10;    MyClass.method1(self) #явный вызов метода суперкласса&#10;    print (f&quot;{arg} &quot;)&#10;    &#10;    assert arg , &quot;Check invariant - result is not empty&quot;" description="method with raise and assert" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class abstract" value="from abc import ABCMeta, abstractmethod&#10;&#10;&#10;class MyAbstract(metaclass=ABCMeta):&#10;    &quot;&quot;&quot; abstract interface &quot;&quot;&quot;&#10;    @abstractmethod&#10;    def method1(self):...&#10;&#10;&#10;class MyImplementation(object):&#10;    &quot;&quot;&quot; some implementation of abstract interface &quot;&quot;&quot;&#10;    def method1(self):&#10;        print(&quot;mymethod&quot;)&#10;&#10;&#10;o12=MyImplementation()&#10;o12.method1()" description="ABCMeta, abstractmethod" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class overload +" value="class Comp(object):&#10;    &quot;&quot;&quot; subclass override &quot;&quot;&quot;&#10;    &#10;    def __init__(self, val):&#10;        self.val = val&#10;&#10;    def __add__(self, other):   # x+2&#10;        if isinstance(other, Comp):&#10;            other = other.val&#10;        return Comp(self.val + other)&#10;&#10;    def __radd__(self, other):  # 2+x&#10;        return Comp(other + self.val)&#10;&#10;    def __iadd__(self,other):   # x+=2&#10;        self.val+=other&#10;        return self&#10;&#10;    def __repr__(self):&#10;        return f'Comp={self.val}'&#10;        &#10;    def someMethod(self):&#10;        return NotImplemented&#10;        &#10;&#10;c1, c2 = Comp(88), Comp(99)&#10;print(1+c1)&#10;print(c1+c2)&#10;c1+=3&#10;print(c1)" description="overload __add__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="property getter + setter" value="# todo: &#10;#      add to the __init__:  self._$age$=None&#10;#      add to the __repr__:  f&quot;{self._$age$}&quot;&#10;&#10;@property&#10;def $age$(self):&#10;    &quot;&quot;&quot; $age$ &quot;&quot;&quot;&#10;    return self._$age$&#10;&#10;@age.setter&#10;def $age$(self,value):&#10;    if not value: raise ValueError(&quot;Setter argument must not be empty.&quot;)&#10;    assert isinstance(value,str)&#10;&#10;    self._$age$=value&#10;" description="@property" toReformat="false" toShortenFQNames="true">
    <variable name="age" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class mutable new-call pattern" value="class $name$(object):&#10;    &quot;&quot;&quot; class $name$ new-call pattern &quot;&quot;&quot;&#10;&#10;    def __init__(self,age):&#10;        if not age: raise ValueError(&quot;Constructor's argument must not be empty.&quot;)&#10;        assert isinstance(age,str)&#10;        &#10;        self._age=age&#10;&#10;    @property&#10;    def age(self):&#10;        &quot;&quot;&quot; age &quot;&quot;&quot;&#10;        return self._age&#10;&#10;    def method1(self):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        print (f&quot;method1:{self._age}&quot;)&#10;        &#10;        assert self._age , &quot;Check invariant - result is not empty&quot;&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self._age}&quot;&#10;&#10;&#10;obj1=$name$(&quot;test&quot;)&#10;obj1.method1()&#10;$END$" description="new-call pattern" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class static methods" value="class $name$(object):&#10;    &quot;&quot;&quot; class $name$ &quot;&quot;&quot;&#10;&#10;    # DEPRECATED @staticmethod&#10;    def method1(arg):&#10;        &quot;&quot;&quot;static method1 &quot;&quot;&quot;&#10;        if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;        assert isinstance(arg,str)&#10;        &#10;        print (f&quot;method1:{arg}&quot;)&#10;        &#10;        assert arg , &quot;Check invariant - result is not empty&quot;&#10;&#10;&#10;$name$.method1(&quot;12&quot;)&#10;$END$" description="my class" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="method static" value="# DEPRECATED @staticmethod&#10;def method1(arg):&#10;    &quot;&quot;&quot; static method &quot;&quot;&quot;&#10;    if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(arg,str)&#10;     &#10;    print (f&quot;method1:{arg}&quot;)&#10;    &#10;    assert arg , &quot;Check invariant - result is not empty&quot;" description="method with raise and assert" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class immutable class (full)" value="class $FooTuple$(NamedTuple):&#10;    &quot;&quot;&quot; $FooTuple$ &quot;&quot;&quot;&#10;    &#10;    item1: Any&#10;    item2: Any&#10;&#10;    def __hash__(self):&#10;        return hash(self.item1) * hash(self.item2)&#10;&#10;    def method1(self):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        print(f&quot;{self.item1}&quot;)&#10;        &#10;        assert self.item1 , &quot;Check invariant - result is not empty&quot;&#10;&#10;&#10;O_1 = $FooTuple$(11, 12)&#10;print(O_1)&#10;O_1.method1()&#10;$END$" description="class(namedtuple)" toReformat="false" toShortenFQNames="true">
    <variable name="FooTuple" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class mutable new-set-call pattern" value="#допускается использование открытых свойств для простых классов-данных&#10;&#10;class $name$(object):&#10;    &quot;&quot;&quot; new-set-call pattern of class &quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        self.one=None&#10;        self.two=None&#10;&#10;    def method1(self,arg):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        if not self.one or not self.two: raise ValueError(&quot;Object properties must not be empty.&quot;)&#10;        if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)            &#10;        assert isinstance(arg,str)&#10;        assert isinstance(self.one,str)&#10;        assert isinstance(arg,self.two)&#10;        &#10;        print (f&quot;method1:{arg}&quot;)&#10;        &#10;        assert arg , &quot;Check invariant - result is not empty&quot;&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.one} {self.two}&quot;&#10;&#10;&#10;obj1=$name$()&#10;obj1.one=&quot;11&quot;&#10;obj.two=&quot;12&quot;&#10;obj1.method1(&quot;13&quot;)&#10;$END$" description="new-set-call pattern" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class RECORD pattern 2" value="#допускается использование открытых свойств для простых классов-данных&#10;&#10;class $name$(object):&#10;&#10;    def __init__(self,$one$,$two$,$three$):&#10;        self.$one$=$one$&#10;        self.$two$=$two$&#10;        self.$three$=$three$&#10; &#10;&#10;obj1=$name$(1,2,3)&#10;$END$" description="simpienst class" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="one" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="two" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="three" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class RECORD pattern 1" value="#допускается использование открытых свойств для простых классов-данных&#10;&#10;class Entry$END$(object):&#10;&#10;    def __init__(self, $key$=None, $value$=None):&#10;        self.$key$ = $key$&#10;        self.$value$ = $value$&#10;&#10;    def __lt__(self, other):&#10;        return self.$value$ &lt; other.$value$&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.$key$}-{self.$value$}&quot;" description="simpienst class" toReformat="false" toShortenFQNames="true">
    <variable name="key" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class mutable SUPER new-call pattern" value="# __init__, __repr__, __str__ и __eq__ &#10;&#10;@dataclass&#10;class $name$(object):&#10;&#10;    title: str = &quot;Unknown&quot;          # default values&#10;    author: str = &quot;Unknown author&quot;  # = field(default_factory=lambda:[])&#10;&#10;    def __post_init__(self):        # custom init constructor&#10;        self.desc = self.desc or &quot;`%s` by %s&quot; % (self.title, self.author)&#10;&#10;    def __iter__(self):&#10;        &quot;&quot;&quot; for unpacking in pattern matching &quot;&quot;&quot;&#10;        yield self.title&#10;        yield self.author&#10;&#10;&#10;obj1=$name$(&quot;one&quot;,&quot;two&quot;)&#10;$END$&#10;&#10; " description="@dataclass" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class immutable SUPER" value="# __init__, __repr__, __str__ и __eq__ &#10;# __lt__, __le__, __gt__ и __ge__     &#10;#       order=True   &#10;#       value: Any = field(compare=False)&#10;# __hash__()&#10;#       unsafe_hash=True &#10;#       title: str = &quot;Unknown&quot; = field(hash=False)&#10;&#10;&#10;@dataclass(frozen=True, order=True, unsafe_hash=True)&#10;class $name$(object):&#10;&#10;    title: str = &quot;Unknown&quot;&#10;    author: str = &quot;Unknown author&quot;&#10;&#10;    def __iter__(self):&#10;        &quot;&quot;&quot; for unpacking in pattern matching &quot;&quot;&quot;&#10;        yield self.title&#10;        yield self.author&#10;&#10;&#10;obj1=$name$(&quot;one&quot;,&quot;two&quot;)&#10;$END$" description="@dataclass" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class mutable SUPER simple" value="@dataclass&#10;class $name$(object):&#10;&#10;    title: Any&#10;    author: Any&#10;    &#10;    def __iter__(self):&#10;        &quot;&quot;&quot; for unpacking in pattern matching &quot;&quot;&quot;&#10;        yield self.title&#10;        yield self.author&#10;        &#10;        &#10;obj1=$name$(&quot;one&quot;,&quot;two&quot;)&#10;$END$&#10;&#10; " description="@dataclass" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>