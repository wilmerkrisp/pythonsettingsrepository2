<templateSet group="_CLASS">
  <template name="newclass mutable new-call pattern 2" value="class $name$():&#10;    &quot;&quot;&quot; new-call pattern of class &quot;&quot;&quot;&#10;&#10;    def __init__(self,one,two):&#10;        self.__one=one&#10;        self.__two=two&#10;        self.__age=None&#10;&#10;    @property&#10;    def age(self):&#10;        &quot;&quot;&quot; age &quot;&quot;&quot;&#10;        return self.__age&#10;&#10;    @age.setter&#10;    def age(self,value):&#10;        if not value: raise ValueError(&quot;Setter argument must not be empty.&quot;)&#10;        assert isinstance(value,int)&#10;        &#10;        self.__age=value&#10;&#10;    def method1(self,arg):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;        assert isinstance(arg,int)&#10; &#10;        print (f&quot;method1:{arg}&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.__one} {self.__two}&quot;&#10;&#10;&#10;obj1=$name$(&quot;1&quot;,&quot;2&quot;)&#10;obj1.method1(12)&#10;$END$" description="new-call pattern 2 with setter" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass oneline" value="class $name$(): ...&#10;&#10;obj1=$name$()&#10;&#10;$END$" description="my class" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newmethod 1" value="def method1(self,arg):&#10;    &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;    if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(arg,int)&#10;    &#10;    MyClass.method1(self) #явный вызов метода суперкласса&#10;    print (f&quot;{arg} &quot;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass abstract" value="from abc import ABCMeta, abstractmethod&#10;&#10;class MyAbstract(metaclass=ABCMeta):&#10;    &quot;&quot;&quot; abstract interface &quot;&quot;&quot;&#10;    @abstractmethod&#10;    def method1(self):...&#10;&#10;class MyImplementation:&#10;    &quot;&quot;&quot; some implementation of abstract interface &quot;&quot;&quot;&#10;    def method1(self):&#10;        print(&quot;mymethod&quot;)&#10;&#10;o12=MyImplementation()&#10;o12.method1()" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass overload +" value="class Comp:&#10;    &quot;&quot;&quot; subclass override &quot;&quot;&quot;&#10;    &#10;    def __init__(self, val):&#10;        self.val = val&#10;&#10;    def __add__(self, other):   # x+2&#10;        if isinstance(other, Comp):&#10;            other = other.val&#10;        return Comp(self.val + other)&#10;&#10;    def __radd__(self, other):  # 2+x&#10;        return Comp(other + self.val)&#10;&#10;    def __iadd__(self,other):   # x+=2&#10;        self.val+=other&#10;        return self&#10;&#10;    def __repr__(self):&#10;        return f'Comp={self.val}'&#10;&#10;c1, c2 = Comp(88), Comp(99)&#10;print(1+c1)&#10;print(c1+c2)&#10;c1+=3&#10;print(c1)" description="overload __add__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newproperty 1" value="# todo: &#10;#      add to the __init__:  self.__$age$=None&#10;#      add to the __repr__:  f&quot;{self.__$age$}&quot;&#10;&#10;@property&#10;def $age$(self):&#10;    &quot;&quot;&quot; $age$ &quot;&quot;&quot;&#10;    return self.__$age$&#10;&#10;@age.setter&#10;def $age$(self,value):&#10;    if not value: raise ValueError(&quot;Setter argument must not be empty.&quot;)&#10;    assert isinstance(value,int)&#10;&#10;    self.__$age$=value&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="age" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="newclass mutable new-call pattern" value="class $name$():&#10;    &quot;&quot;&quot; class $name$&#10;        new-call pattern &#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self,age):&#10;        if not age: raise ValueError(&quot;Constructor's argument must not be empty.&quot;)&#10;        assert isinstance(age,int)&#10;        &#10;        self.__age=age&#10;&#10;    @property&#10;    def age(self):&#10;        &quot;&quot;&quot; age &quot;&quot;&quot;&#10;        return self.__age&#10;&#10;    def method1(self):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        print (f&quot;method1:{self.__age}&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.__age}&quot;&#10;&#10;&#10;obj1=$name$(&quot;test&quot;)&#10;obj1.method1()&#10;$END$" description="new-call pattern" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass static methods" value="class $name$():&#10;    &quot;&quot;&quot; class $name$ &quot;&quot;&quot;&#10;&#10;    @staticmethod&#10;    def method1(arg):&#10;        &quot;&quot;&quot;static method1 &quot;&quot;&quot;&#10;        if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;        assert isinstance(arg,int)&#10;        &#10;        print (f&quot;method1:{arg}&quot;)&#10;&#10; &#10;&#10;$name$.method1(12)&#10;$END$" description="my class" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newmethod static" value="@staticmethod&#10;def method1(arg):&#10;    &quot;&quot;&quot; static method &quot;&quot;&quot;&#10;    if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(arg,int)&#10;     &#10;    print (f&quot;method1:{arg}&quot;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass immutable class (full)" value="class $FooTuple$(NamedTuple):&#10;    &quot;&quot;&quot; $FooTuple$ &quot;&quot;&quot;&#10;    &#10;    item1: Any&#10;    item2: Any&#10;&#10;    def __hash__(self):&#10;        return hash(self.item1) * hash(self.item2)&#10;&#10;    def method1(self):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        print(f&quot;{self.item1}&quot;)&#10;&#10;&#10;O_1 = $FooTuple$(11, 12)&#10;print(O_1)&#10;O_1.method1()&#10;$END$" description="class(namedtuple)" toReformat="false" toShortenFQNames="true">
    <variable name="FooTuple" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass mutable new-set-call pattern" value="class $name$():&#10;    &quot;&quot;&quot; new-set-call pattern of class &quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        self.one=None&#10;        self.two=None&#10;&#10;    def method1(self,arg):&#10;        &quot;&quot;&quot; method1 &quot;&quot;&quot;&#10;        if not self.one or not self.two: raise ValueError(&quot;Object properties must not be empty.&quot;)&#10;        if not arg: raise ValueError(&quot;Method input argument must not be empty.&quot;)            &#10;        assert isinstance(arg,int)&#10;        &#10;        print (f&quot;method1:{arg}&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.__one} {self.__two}&quot;&#10;&#10;&#10;obj1=$name$()&#10;obj1.one=11&#10;obj.two=12&#10;obj1.method1(13)&#10;$END$" description="new-set-call pattern" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>