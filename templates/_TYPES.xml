<templateSet group="_TYPES">
  <template name="newclass simple inline" value="class $name$():&#10;    &quot;&quot;&quot; class $name$ &quot;&quot;&quot;&#10;&#10;    def __init__(self,one,two):&#10;        self.one=one&#10;        self.two=two&#10;&#10;    def method1(self):&#10;        print (f&quot;{self.one} {self.two}&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.one} {self.two}&quot;&#10;&#10;&#10;obj1=$name$(&quot;1&quot;,&quot;2&quot;)&#10;obj1.method1()&#10;$END$" description="my class" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass oneline" value="class $name$(): ...&#10;&#10;obj1=$name$()&#10;&#10;$END$" description="my class" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newmethod 1" value="def method1(self):&#10;    MyClass.method1(self) #явный вызов метода суперкласса&#10;    print (f&quot;{self.one} {self.two}&quot;)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newmethod abstract" value="from abc import ABCMeta, abstractmethod&#10;&#10;class MyAbstract(metaclass=ABCMeta):&#10;    @abstractmethod&#10;    def method1(self):...&#10;&#10;class MyImplementation:&#10;    def method1(self):&#10;        print(&quot;mymethod&quot;)&#10;&#10;o12=MyImplementation()&#10;o12.method1()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="newclass overload +" value="class Comp:&#10;    def __init__(self, val):&#10;        self.val = val&#10;&#10;    def __add__(self, other):   # x+2&#10;        if isinstance(other, Comp):&#10;            other = other.val&#10;        return Comp(self.val + other)&#10;&#10;    def __radd__(self, other):  # 2+x&#10;        return Comp(other + self.val)&#10;&#10;    def __iadd__(self,other):   # x+=2&#10;        self.val+=other&#10;        return self&#10;&#10;    def __repr__(self):&#10;        return f'Comp={self.val}'&#10;&#10;c1, c2 = Comp(88), Comp(99)&#10;print(1+c1)&#10;print(c1+c2)&#10;c1+=3&#10;print(c1)" description="overload __add__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>