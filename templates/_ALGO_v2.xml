<templateSet group="_ALGO_v2">
  <template name="for FOR LIST" value="for i in range(len($P$)):&#10;    print($P$[i])" description="for i in range(len)" toReformat="false" toShortenFQNames="true">
    <variable name="P" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for WHILE POP + result" value="result  = []&#10;while $left$ :&#10;    fst=$left$[0]&#10;    lst=$left$[-1]&#10;    result[:0] = [$left$.pop()]  # TODO плохой вариант так как вставка будет занимать много времени&#10;&#10;$END$    " description="while list: pop()" toReformat="false" toShortenFQNames="true">
    <variable name="left" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for WHILE POP C-STYLE _SUPER_stack" value="while obj:=$left$.pop() if $left$ else None:&#10;    print(obj)&#10;    # stack += [12]&#10;    # стек не должен сожержать None элементы&#10;    &#10;$END$    " description="while pop():   стек не должен сожержать None элементы" toReformat="false" toShortenFQNames="true">
    <variable name="left" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for WHILE POP HEAP _SUPER_" value="while obj := heapq.heappop($left$) if $left$ else None:&#10;    print(obj)&#10;    # куча не должна сожержать None элементы&#10;    &#10;$END$&#10;  " description="while heappop:   куча не должна сожержать None элементы" toReformat="false" toShortenFQNames="true">
    <variable name="left" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for WHILE POPLEFT DEQUEUE" value="result  = []&#10;$arr$=collections.deque($left$)&#10;while $arr$ :&#10;    fst=$arr$[0]&#10;    lst=$arr$[-1]&#10;    result+= [$arr$.popleft()]&#10;    &#10;    # $arr$+=[newval]&#10;    #  очередь не должна сожержать None элементы&#10;&#10;$END$&#10;  " description="while dequeue: popleft()" toReformat="false" toShortenFQNames="true">
    <variable name="arr" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="left" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap PARENT_TABLE create graph from 1" value="parent_table, result_graph = {},  collections.defaultdict(list)&#10;&#10;for obj, obj_parent in parent_table.items():&#10;    result_graph[obj_parent.parent] += [obj]" description="for e, p in parent_table.items():" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap PARENT_TABLE create graph from 2" value="g = {vertex:[parent.parent] for vertex, parent in sets._UnionFind__table.items()}" description="{v1:[p.parent] for v1, p in sets._UnionFind__table.items()}" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap PARENT_TABLE WHILE pop C-STYLE   iter" value="next_vertex = start_vertex&#10;while next_parent := $d0$.get(next_vertex):  # get=None if absent&#10;    if next_vertex == next_parent: return next_parent&#10;    next_vertex = next_parent&#10;         &#10;$END$    " description="while next=get(next):   # iterate over network" toReformat="false" toShortenFQNames="true">
    <variable name="d0" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap PARENT_TABLE WHILE pop C-STYLE pop" value="result=[]    &#10;next_vertex = start_vertex&#10;result += start_vertex&#10;while next_vertex := $d0$.pop(next_vertex, None):&#10;    result += next_vertex    &#10;    &#10;$END$    " description="while next=pop(next):   # iterate over network" toReformat="false" toShortenFQNames="true">
    <variable name="d0" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap WHILE POP (GOOD dict iterate and delete element)" value="while $d0$:&#10;    print ($d0$.popitem())&#10;$END$    " description="while dict: popitem()" toReformat="false" toShortenFQNames="true">
    <variable name="d0" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap WHILE POP C-STYLE _SUPER_" value="while obj:=$d0$.popitem() if $d0$ else None:&#10;    print (obj)&#10;$END$&#10;" description="while popitem():" toReformat="false" toShortenFQNames="true">
    <variable name="d0" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func draw  undirected graph" value="import networkx as nx&#10;import matplotlib.pyplot as plt&#10;&#10;def draw_graph():&#10;    G = nx.Graph()&#10;    G.add_node(&quot;A&quot;)&#10;    G.add_node(&quot;B&quot;)&#10;    G.add_node(&quot;C&quot;)&#10;    G.add_node(&quot;D&quot;)&#10;    G.add_node(&quot;E&quot;)&#10;    G.add_node(&quot;F&quot;)&#10;    G.add_node(&quot;G&quot;)&#10;    G.add_edge(&quot;A&quot;, &quot;B&quot;)&#10;    G.add_edge(&quot;B&quot;, &quot;C&quot;)&#10;    G.add_edge(&quot;C&quot;, &quot;E&quot;)&#10;    G.add_edge(&quot;C&quot;, &quot;F&quot;)&#10;    G.add_edge(&quot;D&quot;, &quot;E&quot;)&#10;    G.add_edge(&quot;F&quot;, &quot;G&quot;)&#10;    plt.figure(figsize=(8, 8))&#10;    nx.draw(G)&#10;&#10;draw_graph()" description="networkx" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func draw график функции" value="import matplotlib.pyplot as plt&#10;from math import *&#10;&#10;F1 = [x ** 0.5 for x in range(1, 100)]&#10;F2 = [2 ** (log(x)) for x in range(1, 100)]&#10;F3 = [x ** (5/3) for x in range(1, 100)]&#10;&#10;fig, ax = plt.subplots()&#10;ax.plot(F1,color='black')&#10;ax.plot(F2,color='red')&#10;ax.plot(F3)&#10;plt.show()" description="matplotlib" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func draw точки на плоскости" value="import matplotlib.pyplot as plt&#10;from math import *&#10;&#10;P = [(2, 3), (12, 30), (40, 50), (5, 1), (2, 10), (3, 4)]&#10;&#10;# Draw point based on above x, y axis values.&#10;plt.scatter([x for x, y in P], [y for x, y in P], s=10)&#10;for i, (x,y) in enumerate(P):&#10;    plt.annotate(f&quot;{x},{y}&quot;, (P[i][0], P[i][1]))&#10;plt.show()" description="matplotlib" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func FILE read 1val" value="def file_to_array(filename):&#10;    result = []&#10;    for line in open(filename):&#10;        str=line.strip()&#10;        if not str:&#10;            continue&#10;        num=int(str)&#10;        assert isinstance(num,int), f&quot;NUM={num}&quot;&#10;        result.append(num)&#10;    print(&quot;Integers readed:&quot;,len(result) )&#10;    return result&#10;&#10;&#10;ARR4 = file_to_array(r'C:\Users\trans\Downloads\IntegerArray.txt')&#10;print(&quot;ARR4&gt;&gt;&quot;,ARR4[:3])&#10;&#10;&#10;&#10; " description="for line in open(filename)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func FILE read 2val" value="def $file_to_array$(filename):&#10;    result = []&#10;    skip_first=True&#10;    for line in open(filename):&#10;        str = line.strip()&#10;        if not str: continue&#10;&#10;        if skip_first: skip_first=False; continue&#10;        w_, l_ = str.strip().split(&quot; &quot;)&#10;        w, l = int(w_.strip()), int(l_.strip())&#10;        assert isinstance(w, int), f&quot;NUM1={w}&quot;&#10;        assert isinstance(l, int), f&quot;NUM2={l}&quot;&#10;        result.append((w,l))&#10;    print(&quot;Integers readed:&quot;, len(result))&#10;    return result&#10;&#10;&#10;arr = $file_to_array$(r'C:\Users\trans\Downloads\IntegerArray.txt')&#10;print(&quot;ARR4&gt;&gt;&quot;,arr)" description="for line in open(filename)" toReformat="false" toShortenFQNames="true">
    <variable name="file_to_array" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for WHILE POP C-STYLE _SUPER_queue" value="while obj:=$left$.pop() if $left$ else None: &#10;    print(obj)&#10;    # queue.appendLeft(12)&#10;    #  очередь не должна сожержать None элементы&#10;" description="while pop():   очередь не должна сожержать None элементы" toReformat="false" toShortenFQNames="true">
    <variable name="left" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func draw n-ary tree" value="def draw_n_ary_tree(tree, labels_=None):&#10;    &quot;&quot;&quot;&#10;    class TreeNode(object):&#10;        def __init__(self, x):&#10;            self.val = x&#10;            self.left = None&#10;            self.right = None&#10;    &quot;&quot;&quot;&#10;    if not labels_:&#10;        labels_ = {&#10;            tree: &quot;ROOT&quot;&#10;        }&#10;&#10;    graph = nx.DiGraph()&#10;&#10;    # graph pre-prder traversal&#10;    stack = [tree]&#10;    while node := stack.pop() if stack else None:&#10;        # add node&#10;        graph.add_node(node)&#10;        label_additional = labels_.get(node, &quot;&quot;)&#10;        labels_[node] = f&quot;{node.val}  *{label_additional}*&quot;&#10;&#10;        stack += node.children[::-1]  # :-1 чтобы первый ребенок выбрали первым&#10;        for child in node.children:&#10;            graph.add_edge(node, child, left=&quot;&quot;)  # add edge&#10;&#10;    pos = nx.planar_layout(graph)&#10;    # pos = nx.spring_layout(graph)&#10;    nx.draw_networkx_nodes(graph, pos)&#10;&#10;    nx.draw_networkx_labels(graph, pos, labels=labels_)&#10;    nx.draw_networkx_edge_labels(graph, pos)&#10;    nx.draw_networkx_edges(graph, pos, edge_color='r', arrows=True)&#10;    plt.show()" description="matplotlib" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func draw linked list" value="def draw_linked_list(llist, labels_=None):&#10;    &quot;&quot;&quot;&#10;    class ListNode(object):&#10;        def __init__(self, val):&#10;            self.val = val&#10;            self.prev = None&#10;            self.next = None&#10;    &quot;&quot;&quot;&#10;    if not labels_:&#10;        labels_ = {&#10;            llist: &quot;ROOT&quot;&#10;        }&#10;&#10;    graph = nx.DiGraph()&#10;&#10;    # list traversal&#10;    list_repr = []&#10;&#10;    node, seen = llist, set()&#10;    while node and node not in seen:&#10;        graph.add_node(node)&#10;        label_additional = labels_.get(node, &quot;&quot;)&#10;        labels_[node] = f&quot;{node.val}  *{label_additional}*&quot;&#10;&#10;        if node.next:&#10;            graph.add_edge(node, node.next)&#10;&#10;        seen |= {node}&#10;        node = node.next&#10;&#10;    # pos = nx.planar_layout(graph)&#10;    pos = nx.spring_layout(graph)&#10;    nx.draw_networkx_nodes(graph, pos)&#10;&#10;    nx.draw_networkx_labels(graph, pos, labels=labels_)&#10;    nx.draw_networkx_edge_labels(graph, pos)&#10;    nx.draw_networkx_edges(graph, pos, edge_color='r', arrows=True)&#10;    plt.show()" description="matplotlib" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func draw binary tree" value="import binarytree as bt&#10;&#10;def draw_binary_tree(tree, labels_=None):&#10;    &quot;&quot;&quot;&#10;    class TreeNode(object):&#10;        def __init__(self, x):&#10;            self.val = x&#10;            self.left = None&#10;            self.right = None&#10;    &quot;&quot;&quot;&#10;    tree_map = {}&#10;&#10;    # graph pre-prder traversal&#10;    stack = [tree]&#10;    while node := stack.pop() if stack else None:&#10;        # add node&#10;        tree_map[node] = bt.Node(node.val)&#10;&#10;        if node.left:&#10;            stack += [node.left]&#10;        if node.right:&#10;            stack += [node.right]&#10;&#10;    for node, new_node in tree_map.items():&#10;        new_node.left = tree_map.get(node.left)&#10;        new_node.right = tree_map.get(node.right)&#10;&#10;    root = tree_map[tree]&#10;    print(root)" description="binarytree lib" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func draw trie" value="def draw_trie(tree, labels_=None):&#10;    &quot;&quot;&quot;&#10;    class TreeNode(object):&#10;        def __init__(self, x):&#10;            self.val = x&#10;            self.left = None&#10;            self.right = None&#10;    &quot;&quot;&quot;&#10;    if not labels_:&#10;        labels_ = {&#10;            tree: &quot;ROOT&quot;&#10;        }&#10;&#10;    graph = nx.DiGraph()&#10;&#10;    # graph pre-prder traversal&#10;    stack = [tree]&#10;    while node := stack.pop() if stack else None:&#10;        # add node&#10;        graph.add_node(node)&#10;        label_additional = labels_.get(node, &quot;&quot;)&#10;        labels_[node] = f&quot;{node.is_end}  *{label_additional}*&quot;&#10;&#10;        stack += list(node.children.values())[::-1]  # :-1 чтобы первый ребенок выбрали первым&#10;        for key, child in node.children.items():&#10;            graph.add_edge(node, child, left=key)  # add edge&#10;&#10;    # pos = nx.planar_layout(graph)&#10;    pos = nx.spring_layout(graph)&#10;    nx.draw_networkx_nodes(graph, pos)&#10;&#10;    nx.draw_networkx_labels(graph, pos, labels=labels_)&#10;    nx.draw_networkx_edge_labels(graph, pos)&#10;    nx.draw_networkx_edges(graph, pos, edge_color='r', arrows=True)&#10;    plt.show()" description="matplotlib" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>