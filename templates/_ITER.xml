<templateSet group="_ITER">
  <template name="for WHILE  esle" value="while arr:&#10;    print (arr.popitem())&#10;    if True: continue&#10;    if True: break&#10;else: #более структурированный способ перехвата случая с неудавшимся поиском.&#10;    print (&quot;final cycle&quot;)   " description="my while else break continue" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for WHILE  C-style by INT-INDEX" value="cnt=10&#10;fnn=1&#10;while ((obj:=fnn)!=-1):&#10;    cnt-=1&#10;    fnn = -1 if cnt==0 else cnt&#10;    print(&quot;iter&quot;,obj)" description="my while (i:=)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for FOR else" value="for i in range(1,10):&#10;    print (&quot;i=&quot;,i)&#10;    if True: continue&#10;    if True: break&#10;else: #более структурированный способ перехвата случая с неудавшимся поиском.&#10;    print (&quot;final cycle&quot;)   " description="for_in_else" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for FOR one line" value="for i in range(1,10):  print (&quot;i=&quot;,i)" description="for_in range" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for GEN  new list" value="[i + 1$END$ for i in $L$ if True]" description="[ for_in_if ]" toReformat="false" toShortenFQNames="true">
    <variable name="L" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for FOR  with INDEX" value="arr=range(1,10)&#10;for i,obj in enumerate(arr):  print (f&quot;{i}={obj}&quot;)" description="for_in enumerate" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="DEPRECATED for GEN new list FOR-FOR" value="nlist = [(i,j) for i in range(1,10) for j in range(1,10) ] # i-outer cycle, j inner cycle&#10;print(&quot;&gt;&gt;&quot;,nlist )" description="[ for_in for_in ]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap MAP operations" value="list(map(lambda one: one+1, range(1,10)))&#10;list(map(pow, range(1, 10),range(1, 10))) # у функции pow два аргумента&#10;list(filter(lambda one: True, range(1,10)))&#10;&#10;&quot;&quot;&quot;&#10;reduce&#10;sum&#10;any&#10;all&#10;max&#10;min&#10;&quot;&quot;&quot;" description="list(map(lambda)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class iterator" value="mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9]&#10;&#10;&#10;class MyIterator:&#10;    &quot;&quot;&quot; multiple iterable class &quot;&quot;&quot;&#10;    def __init__(self, wrapped):&#10;        self.wrapped = wrapped&#10;&#10;    def __iter__(self):&#10;        offset = 0&#10;        while offset &lt; len(self.wrapped):&#10;            item = self.wrapped[offset]&#10;            offset += 2&#10;            yield item&#10;&#10;&#10;print(list(MyIterator(mylist)))" description="NEW  __iter__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for cold-&gt;hot" value="# сделать итератор истощаемым&#10;new_=iter($coll$)" description="for enumerate" toReformat="false" toShortenFQNames="true">
    <variable name="coll" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class sequence" value="class sequencee():&#10;    &quot;&quot;&quot; sequence class&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self, wrapped):&#10;        if not wrapped: raise ValueError(&quot;Constructor's argument must not be empty.&quot;)&#10;        #assert isinstance(wrapped, list)&#10;&#10;        self.__wrapped = wrapped&#10;&#10;    def __len__(self):&#10;        return len(self.__wrapped)&#10;&#10;    def __getitem__(self, item):&#10;        return self.__getitem__(item)&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.__wrapped}&quot;&#10;&#10;&#10;obj = sequencee(&quot;test&quot;)&#10;print(obj1)" description="NEW  __len____getitem__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for RAISE from two cycles" value="try:&#10;    for i in range(1, 10):&#10;        for j in range(100, 110):&#10;            print(f&quot;{i}-{j}&quot;)&#10;            if i == 4 and j == 105: raise StopIteration&#10;except StopIteration:&#10;    print(&quot;exit from cycle&quot;)" description="try for raise" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="len of iterable" value="len($var$)$END$" description="" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap GEN  new map SUPER" value="[key:value $END$ for key,value in $L$.items() if True]" description="[ for_in_if ]" toReformat="false" toShortenFQNames="true">
    <variable name="L" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap GEN new list FOR-FOR" value="graph = dict(a=dict(b=1, c=4, d=3), b=dict(a=1, d=2), c=dict(a=4, d=5), d=dict(b=2, c=5, a=3))&#10;costs=[]&#10;for vertex1, edges in graph.items():&#10;    for vertex2, cost in edges.items():&#10;        costs+=[(vertex1,vertex2,cost)]&#10;        &#10;# DEPRECATED costs = [(v1,v2,cost) for v1, dict1 in graph.items() for v2, cost in dict1.items()] # graph - outer cycle, dict1.items - inner cycle&#10;print(&quot;&gt;&gt;&quot;,costs )" description="[ for_in for_in ]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list new list of lists [ [] ]" value="len_x,len_y=10,5&#10;cols = [[0] * len_y for _ in range(len_x)]&#10;&#10;&quot;&quot;&quot;&#10;вложенные [ for for ]  запрещены&#10;&#10;table_vesi = [[[] for _ in range(len(vesi) + 1)] for _ in range(bagpack_capasity + 1)]&#10;    &#10;l = len(graph)&#10;table_vesi = [[inf for _ in range(l)] for _ in range(l)]&#10;&quot;&quot;&quot;" description="[[0] * len_y for _ in range(len_x)]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for matrix grid table" value="for y, row in enumerate($rooms$):&#10;    for x, val in enumerate(row):&#10;        print(x,y,val)$END$" description="for_in enumerate" toReformat="false" toShortenFQNames="true">
    <variable name="rooms" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class sequence SUPER get+set" value="class sequencee():&#10;    &quot;&quot;&quot; sequence class&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self, wrapped):&#10;        if not wrapped: raise ValueError(&quot;Constructor's argument must not be empty.&quot;)&#10;        #assert isinstance(wrapped, list)&#10;&#10;        self.__wrapped = wrapped&#10;&#10;    def __len__(self):&#10;        return len(self.__wrapped)&#10;&#10;    def __getitem__(self, idx):&#10;        &quot;&quot;&quot; [range) or 0-based index &quot;&quot;&quot;&#10;&#10;        if isinstance(idx, slice):&#10;            # do your handling for a slice object:&#10;            if not (0 &lt;= idx.start &lt; len(self.tree) and 0 &lt; idx.stop &lt;= len(self.tree)):&#10;               raise IndexError(repr(idx))&#10;                &#10;            print(idx.start, idx.stop-1, idx.step) # ! stop index exclusive&#10;        else:&#10;            # Do your handling for a plain index&#10;            if not (0 &lt;= idx &lt; len(self.tree)):&#10;               raise IndexError(repr(idx))&#10;                &#10;            print(idx)&#10;&#10;    def __setitem__(self, idx, value):&#10;        &quot;&quot;&quot; [range) or 0-based index &quot;&quot;&quot;&#10;&#10;        if isinstance(idx, slice):&#10;            # do your handling for a slice object:&#10;            if not (0 &lt;= idx.start &lt; len(self.tree) and 0 &lt; idx.stop &lt;= len(self.tree)):&#10;               raise IndexError(repr(idx))&#10;               &#10;            print(idx.start, idx.stop-1, idx.step) # ! stop index exclusive&#10;        else:&#10;            # Do your handling for a plain index&#10;            if not (0 &lt;= idx &lt; len(self.tree)):&#10;               raise IndexError(repr(idx))&#10;               &#10;            print(idx)&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.__wrapped}&quot;&#10;&#10;&#10;obj = sequencee(&quot;test&quot;)&#10;print(obj1)&#10;&#10;" description="NEW  __len____getitem__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>