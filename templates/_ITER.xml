<templateSet group="_ITER">
  <template name="for WHILE  esle" value="while d0:&#10;    print (d0.popitem())&#10;    if True: continue&#10;    if True: break&#10;else: #более структурированный способ перехвата случая с неудавшимся поиском.&#10;    print (&quot;final cycle&quot;)   " description="my while else break continue" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for WHILE  C-style" value="k=10&#10;fnn=1&#10;while ((i:=fnn)!=-1):&#10;    k-=1&#10;    fnn = -1 if k==0 else k&#10;    print(&quot;iter&quot;,i)" description="my while (i:=)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for FOR else" value="for i in range(1,10):&#10;    print (&quot;i=&quot;,i)&#10;    if True: continue&#10;    if True: break&#10;else: #более структурированный способ перехвата случая с неудавшимся поиском.&#10;    print (&quot;final cycle&quot;)   " description="for_in_else" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for FOR one line" value="for i in range(1,10):  print (&quot;i=&quot;,i)" description="for_in range" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for GEN  new list" value="[i + 1$END$ for i in $L$ if True]" description="[ for_in_if ]" toReformat="false" toShortenFQNames="true">
    <variable name="L" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for FOR  with INDEX" value="arr=range(1,10)&#10;for (i,e) in enumerate(arr):  print (f&quot;{i}={e}&quot;)" description="for_in enumerate" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for GEN new list for-for" value="nlist = [(i,j) for i in range(1,10) for j in range(1,10) ]&#10;print(&quot;&gt;&gt;&quot;,nlist )" description="[ for_in for_in ]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for MAP operations" value="l1=list(map(lambda x: x+1, range(1,10)))&#10;l2 = list(map(pow, range(1, 10),range(1, 10))) # у функции pow два аргумента&#10;l3=list(filter(lambda x: True, range(1,10)))&#10;&quot;&quot;&quot;&#10;reduce&#10;sum&#10;any&#10;all&#10;max&#10;min&#10;&quot;&quot;&quot;" description="list(map(lambda)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class  iterator" value="mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9]&#10;&#10;&#10;class MyIterator:&#10;    &quot;&quot;&quot; multiple iterable class &quot;&quot;&quot;&#10;    def __init__(self, wrapped):&#10;        self.wrapped = wrapped&#10;&#10;    def __iter__(self):&#10;        offset = 0&#10;        while offset &lt; len(self.wrapped):&#10;            item = self.wrapped[offset]&#10;            offset += 2&#10;            yield item&#10;&#10;&#10;print(list(MyIterator(mylist)))" description="NEW  __iter__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for cold-&gt;hot" value="# сделать итератор истощаемым&#10;new_=iter($coll$)" description="for enumerate" toReformat="false" toShortenFQNames="true">
    <variable name="coll" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="class sequence" value="class sequencee():&#10;    &quot;&quot;&quot; sequence class&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self, wrapped):&#10;        if not wrapped: raise ValueError(&quot;Constructor's argument must not be empty.&quot;)&#10;        #assert isinstance(wrapped, list)&#10;&#10;        self.__wrapped = wrapped&#10;&#10;    def __len__(self):&#10;        return len(self.__wrapped)&#10;&#10;    def __getitem__(self, item):&#10;        return self.__getitem__(item)&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.__wrapped}&quot;&#10;&#10;&#10;obj1 = sequencee(&quot;test&quot;)&#10;print(obj1)" description="NEW  __len____getitem__" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for ALL COMBINATIONS" value="# from itertools import *&#10;arr1 = &quot;abcd&quot;&#10;arr2 = [1, 2, 3, 4]&#10;for x, y in product(arr1,arr2):&#10;    print (x,y)" description="itertools.product" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for FOR with exit" value="try:&#10;    for ii in range(1, 10):&#10;        for jj in range(100, 110):&#10;            print(f&quot;{ii}-{jj}&quot;)&#10;            if ii == 4 and jj == 105: raise StopIteration&#10;except StopIteration:&#10;    print(&quot;exit from cycle&quot;)" description="for raise" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="len of iterable" value="len($var$)$END$" description="" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for GEN  new map SUPER" value="[k:v $END$ for k,v in $L$.items() if True]" description="[ for_in_if ]" toReformat="false" toShortenFQNames="true">
    <variable name="L" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>