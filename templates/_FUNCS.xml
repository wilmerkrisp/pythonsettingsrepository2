<templateSet group="_FUNCS">
  <template name="function GOOD standalone" value="def $name$(one,two):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not one or not two: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(one,str) and isinstance(two,str)&#10;    &#10;    print (f&quot;{x} {y}&quot;)&#10;    &#10;    assert one and two , &quot;Check invariant - result is not empty&quot;&#10;&#10;&#10;$name$(one=1,two=2)&#10;$END$" description="def function SIMPIEST" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function use external vars" value="v=&quot;no&quot;&#10;def $name$(one,two):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not one or not two: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(one,str) and isinstance(two,str)&#10;    &#10;    global v&#10;    nonlocal w  &#10;    v=&quot;yes&quot;&#10;    print (f&quot;{one} {two}&quot;)&#10;    &#10;    assert one and two , &quot;Check invariant - result is not empty&quot;&#10;&#10;&#10;$name$(one=1,two=2)&#10;$END$" description="my fn 2" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function multiple results" value="def $name$(one,two):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not one or not two: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(one,str) and isinstance(two,str)&#10;    &#10;    assert one and two , &quot;Check invariant - result is not empty&quot;&#10;    return one,two&#10; &#10;&#10;result1, result2=$name$(one=1,two=2)&#10;print(result1, result2)&#10;$END$" description="return x,y" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function with MUST_NAMED default args" value="# при вызове функции все аргументы обязаны быть именованными&#10;&#10;def $name$(*,one=11,two=12):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not one or not two: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(one,str) and isinstance(two,str)&#10;    &#10;    print (f&quot;{one} {two}&quot;)&#10;    &#10;    assert one and two , &quot;Check invariant - result is not empty&quot;&#10;&#10;&#10;$name$(one=1,two=2)&#10;$END$" description="my fn" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function oneline aka lambda" value="def func(left, mid, right): return left + mid + right" description="my lambda" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function GEN yield with for" value="#генераторные функции это одноразовый итератор&#10;def $name$(size):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;     for i in range(size):&#10;        yield i&#10; &#10;for i in $name$(10): print(i)&#10;$END$" description="def yield (lazy iterator)" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function NEW-SET-CALL pattern" value="def $name$():&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    print (f&quot;{myfnn.one} {myfnn.two}&quot;)&#10;&#10;&#10;$name$.one=[1]&#10;$name$.two=['a']&#10;$name$()&#10;$END$" description="SPECIAL finction attributes" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function decorator" value="#функция  перенесет все __метаданные на обёртку декоратор&#10;from functools import *&#10;@functools.wraps(func)&#10;&#10;&#10;$END$" description="my fn" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function GEN simpliest" value="#генераторные функции это одноразовый итератор&#10;def $name$():&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    yield &quot;one&quot;&#10;    yield &quot;two&quot;&#10;    yield &quot;three&quot;&#10; &#10;for i in $name$(): print(i)&#10;$END$" description="def yield  yield yield" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function GOOD LIST input argument" value="# &lt;editor-fold desc=&quot;$name$&quot;&gt;&#10;def $name$(arr):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not arr: warn(&quot;Input argument is empty&quot;, UserWarning) &#10;    assert isinstance(arr, list)&#10;&#10;    if len(arr) &lt;2:&#10;        return []&#10;    $END$    &#10;    print (f&quot;$name$: {arr} &quot;)&#10;    &#10;    assert $name$ , &quot;Check invariant - result is not empty&quot;&#10;    return []&#10;&#10;&#10;def main_$name$():&#10;    &quot;&quot;&quot; starter for $bfs$&quot;&quot;&quot;&#10;    arr = [5, 4, 1, 8, 7, 2, 6, 3]&#10;    print(&quot;MAIN $name$: &quot;,$name$(arr))&#10;&#10;&#10;if __name__ == '__main__': main_$name$()&#10;# &lt;/editor-fold&gt;" description="def function SIMPIEST" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="bfs" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function SUPER standalone FOR ALGO" value="# &lt;editor-fold desc=&quot;$bfs$&quot;&gt;&#10;def $bfs$(data):&#10;    &quot;&quot;&quot; $bfs$ return result&quot;&quot;&quot;&#10;    result=[]&#10; &#10;    return result&#10;&#10;&#10;def main_$bfs$():&#10;    &quot;&quot;&quot; starter for $bfs$&quot;&quot;&quot;&#10;    data1 = {&#10;        1:[2, 3],&#10;        2:[1, 3, 4],&#10;        3:[1, 2, 4],&#10;        4:[2, 3]}&#10;&#10;    input_=data1&#10;    result=$bfs$(input_)&#10;    print(&quot;MAIN $bfs$: &quot;, result)&#10;     &#10;&#10;if __name__ == '__main__': main_$bfs$()&#10;# &lt;/editor-fold&gt;" description="funct+main" toReformat="false" toShortenFQNames="true">
    <variable name="bfs" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function ANNOTATE TYPING 1" value="&quot;&quot;&quot;&#10;Any&#10;Final&#10;Union&#10;Optional&#10;Iterable&#10;Collection&#10;Hashable&#10;Callable&#10;&#10;&#10;tuple&#10;list &#10;set &#10;dict&#10;deque&#10;&quot;&quot;&quot;&#10;&#10;&#10;$END$" description="brief descr" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function ANNOTATE TYPING 2" value="&quot;&quot;&quot;&#10;https://docs.python.org/3.9/whatsnew/3.9.html&#10;https://www.python.org/dev/peps/pep-0585/&#10;https://docs.python.org/3.8/library/typing.html&#10;https://docs.python.org/3.8/library/collections.abc.html#collections.abc.Container&#10;&#10;Any&#10;Final&#10;Union&#10;Optional&#10;Iterable&#10;Collection&#10;Hashable&#10;Callable&#10;&#10;&#10;tuple&#10;list &#10;set &#10;dict&#10;deque&#10;&#10;&#10;&#10;tuple # typing.Tuple&#10;list # typing.List&#10;dict # typing.Dict&#10;set # typing.Set&#10;frozenset # typing.FrozenSet&#10;type # typing.Type&#10;collections.deque&#10;collections.defaultdict&#10;collections.OrderedDict&#10;collections.Counter&#10;collections.ChainMap&#10;collections.abc.Awaitable&#10;collections.abc.Coroutine&#10;collections.abc.AsyncIterable&#10;collections.abc.AsyncIterator&#10;collections.abc.AsyncGenerator&#10;collections.abc.Iterable&#10;collections.abc.Iterator&#10;collections.abc.Generator&#10;collections.abc.Reversible&#10;collections.abc.Container&#10;collections.abc.Collection&#10;collections.abc.Callable&#10;collections.abc.Set # typing.AbstractSet&#10;collections.abc.MutableSet&#10;collections.abc.Mapping&#10;collections.abc.MutableMapping&#10;collections.abc.Sequence&#10;collections.abc.MutableSequence&#10;collections.abc.ByteString&#10;collections.abc.MappingView&#10;collections.abc.KeysView&#10;collections.abc.ItemsView&#10;collections.abc.ValuesView&#10;contextlib.AbstractContextManager # typing.ContextManager&#10;contextlib.AbstractAsyncContextManager # typing.AsyncContextManager&#10;re.Pattern # typing.Pattern, typing.re.Pattern&#10;re.Match # typing.Match, typing.re.Match&#10;&#10;&#10;&quot;&quot;&quot;&#10;&#10;&#10;$END$" description="full description" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function ANNOTATE TYPING TURN-OFF" value="# type: ignore&#10;&#10;#для pytype&#10;# pytype: disable=attribute-error" description="full description" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function PARTIAL HASKELL" value="functools.partial(count_animals, 12)&#10;&#10;&quot;&quot;&quot; можно связать аргумент в середине функции, &#10;но тогда в частичной функции нужно будет указывать именованные параметры (те которые после середины функции шли)&#10;&#10;def count_animals(number, kind, adjective='big'):&#10;fn2 = functools.partial(count_animals, kind='tiger')&#10;fn2(12, adjective='little') &#10;&quot;&quot;&quot;" description="частичные функции" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function OVERLOAD  SUPER для разных типов разные функции" value="@functools.singledispatch&#10;def add(a, b): # !! будет смотреть только на тип аргумента &quot;a&quot;&#10;    raise NotImplementedError('Unsupported type')&#10; &#10; &#10;@add.register(int) # вызовется при add(1, 2)&#10;def _(a, b):&#10;    print(&quot;First argument is of type &quot;, type(a))&#10;    print(a + b)&#10; &#10; &#10;@add.register(str) # add('Python', 'Programming')&#10;def _(a, b):&#10;    print(&quot;First argument is of type &quot;, type(a))&#10;    print(a + b)&#10; &#10; &#10;@add.register(list) # add([1, 2, 3], [5, 6, 7])&#10;def _(a, b):&#10;    print(&quot;First argument is of type &quot;, type(a))&#10;    print(a + b)&#10; &#10;if __name__ == '__main__':&#10;    add(1, 2)&#10;    add('Python', 'Programming')&#10;    add([1, 2, 3], [5, 6, 7])&#10;" description="@singledispatch" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function TRIGGER" value="trigger = False&#10;&#10;def run_once(proc):&#10;    nonlocal trigger&#10;    if trigger:&#10;        return&#10;    else:&#10;        trigger = True&#10;        proc()" description="run only once" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>