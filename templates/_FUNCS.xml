<templateSet group="_FUNCS">
  <template name="function GOOD standalone" value="def $name$(x,y):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not x or not y: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(x,str) and isinstance(y,str)&#10;    &#10;    print (f&quot;{x} {y}&quot;)&#10;    &#10;    assert x and y , &quot;Check invariant - result is not empty&quot;&#10;&#10;$name$(x=1,y=2)&#10;$END$" description="def function SIMPIEST" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function use external vars" value="v=&quot;no&quot;&#10;def $name$(x,y):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not x or not y: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(x,str) and isinstance(y,str)&#10;    &#10;    global v&#10;    nonlocal w  &#10;    v=&quot;yes&quot;&#10;    print (f&quot;{x} {y}&quot;)&#10;    &#10;    assert x and y , &quot;Check invariant - result is not empty&quot;&#10; &#10;$name$(x=1,y=2)&#10;$END$" description="my fn 2" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function multiple results" value="def $name$(x,y):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not x or not y: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(x,str) and isinstance(y,str)&#10;    &#10;    assert x and y , &quot;Check invariant - result is not empty&quot;&#10;    return x,y&#10; &#10;a,b=$name$(x=1,y=2)&#10;print(a,b)&#10;$END$" description="return x,y" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function with  default args" value="def $name$(*,x=11,y=12):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not x or not y: raise ValueError(&quot;Method input argument must not be empty.&quot;)&#10;    assert isinstance(x,str) and isinstance(y,str)&#10;    &#10;    print (f&quot;{x} {y}&quot;)&#10;    &#10;    assert x and y , &quot;Check invariant - result is not empty&quot;&#10; &#10;$name$(x=1,y=2)&#10;$END$" description="my fn" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function oneline aka lambda" value="def func(x, у, z): return x + у + z" description="my lambda" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function GEN yield with for" value="#генераторные функции это одноразовый итератор&#10;def $name$(n):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;     for i in range(n):&#10;        yield i&#10; &#10;for i in $name$(10): print(i)&#10;&#10;$END$" description="def yield (lazy iterator)" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function NEW-SET-CALL pattern" value="def $name$():&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    print (f&quot;{myfnn.x} {myfnn.y}&quot;)&#10; &#10;$name$.x=[1]&#10;$name$.y=['a']&#10;$name$()&#10;$END$" description="SPECIAL finction attributes" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function decorator" value="#функция  перенесет все __метаданные на обёртку декоратор&#10;from functools import *&#10;@wraps(func)&#10;&#10;&#10;$END$" description="my fn" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function GEN simpliest" value="#генераторные функции это одноразовый итератор&#10;def $name$():&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    yield &quot;one&quot;&#10;    yield &quot;two&quot;&#10;    yield &quot;three&quot;&#10; &#10;for i in $name$(): print(i)&#10;&#10;$END$" description="def yield  yield yield" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function GOOD LIST input argument" value="##############################################################################################################################################################&#10;################# $name$ #####################################################################################################################################&#10;##############################################################################################################################################################&#10;&#10;def $name$(arr):&#10;    &quot;&quot;&quot; $name$ &quot;&quot;&quot;&#10;    if not arr: warn(&quot;Input argument is empty&quot;, UserWarning) &#10;    assert isinstance(arr, list)&#10;&#10;    if len(arr) &lt;2:&#10;        return []&#10;    $END$    &#10;    print (f&quot;$name$: {arr} &quot;)&#10;    &#10;    assert $name$ , &quot;Check invariant - result is not empty&quot;&#10;    return []&#10;&#10;def main_$name$():&#10;    arr1 = [5, 4, 1, 8, 7, 2, 6, 3]&#10;    print(&quot;MAIN $name$: &quot;,$name$(arr1))&#10;   &#10;main_$name$()" description="def function SIMPIEST" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="function SUPER standalone FOR ALGO" value="##############################################################################################################################################################&#10;################# $bfs$ #####################################################################################################################################&#10;##############################################################################################################################################################&#10;&#10;&#10;def $bfs$(data):&#10;    &quot;&quot;&quot; $bfs$ return result&quot;&quot;&quot;&#10;    result=[]&#10; &#10;    return result&#10;&#10;&#10;def main_$bfs$():&#10;    data1 = {&#10;        1:[2, 3],&#10;        2:[1, 3, 4],&#10;        3:[1, 2, 4],&#10;        4:[2, 3]}&#10;&#10;    input_=data1&#10;    result=$bfs$(input_)&#10;    print(&quot;MAIN $bfs$: &quot;, result)&#10;     &#10;&#10;main_$bfs$()" description="funct+main" toReformat="false" toShortenFQNames="true">
    <variable name="bfs" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>