<templateSet group="_VV_container__collection">
  <template name="map immutable" value="$l1$=( (1:&quot;a&quot;), (2:&quot;b&quot;), $END$)" description="NEW  tuple" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list enumerate ADD INDEX TO COLLECTION ELEMENTS" value="$l1$= enumerate($l$) $END$" description="NEW  coll with indexes" toReformat="false" toShortenFQNames="true">
    <variable name="l" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list immutable" value="$l1$=($END$)" description="NEW  tuple" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list immutableList-&gt;list" value="$s1$=list($s$)" description="NEW  tuple-&gt;list" toReformat="false" toShortenFQNames="true">
    <variable name="s" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="s1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list list-&gt;immutableList" value="$s1$=tuple($s$)" description="NEW  list-&gt;tuple" toReformat="false" toShortenFQNames="true">
    <variable name="s" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="s1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list mutable" value="$l1$=[$END$]" description="NEW  list" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list range [start, stop) step" value="$l1$= range(5,-5,-1) $END$" description="NEW  range lazy" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map dict-&gt;immutableDict" value="$s1$=tuple($s$.items())" description="NEW  dict-&gt;tuple" toReformat="false" toShortenFQNames="true">
    <variable name="s" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="s1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map immutableDict-&gt;dict" value="$s1$=dict($s$)" description="NEW  tuple-&gt;dict" toReformat="false" toShortenFQNames="true">
    <variable name="s" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="s1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map mutable" value="$l1$={1:&quot;a&quot;, 2:&quot;b&quot;, $END$}" description="NEW  dict" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map mutable stringkeys" value="$l1$={uno=&quot;one&quot;,dos=&quot;two&quot; $END$}" description="NEW  dict(uno=&quot;one&quot;)" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="namedtuple temp" value="def ntuple(**params):&#10;    return collections.namedtuple(&quot;NT&quot;,sorted(dn := dict(params) ))(**dn)&#10;&#10;tn2=ntuple(odin=1,dva=2)&#10;print(tn2)&#10;$END$" description="NEW  ntuple(odin=1,dva=2)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="namedtuple dict -&gt; namedtuple" value="dn=dict(uno=1,dos=2) $END$&#10;print(&quot;DICT1 &quot;,dn)&#10;tn= collections.namedtuple(&quot;VO&quot;,sorted(dn))(**dn)&#10;print(&quot;DICT2 &quot;, tn )" description="NEW  namedtuple" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="namedtuple namedtuple -&gt; dict" value="tn._asdict()&#10;$END$" description="NEW  namedtuple._asdict" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="set immutable" value="$l1$=frozenset($list$)&#10;$END$" description="NEW  frozenset" toReformat="false" toShortenFQNames="true">
    <variable name="list" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="set immutableSet-&gt;set" value="$s1$=set($s$)" description="NEW  frozenset-&gt;set" toReformat="false" toShortenFQNames="true">
    <variable name="s" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="s1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="set mutable" value="$l1$=set($END$)" description="NEW  set" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="set set-&gt;immutableSet" value="$s1$=frozenset($s$)" description="NEW  set-&gt;frozenset" toReformat="false" toShortenFQNames="true">
    <variable name="s" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="s1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list-&gt;str" value="print(&quot; &quot;.join(map(str,arr)))&#10;#print(&quot; &quot;.join(str(i) for i in arr))" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list pattern matching 1" value="a,b,c,d=&quot;abcd&quot;&#10;aa,*bcd=&quot;abcd&quot;&#10;# распаковка всегда дает list&#10;# если элементов меньше то *bcd будет []&#10;#a,b,c,d={4: &quot;a&quot;, 3: &quot;c&quot;, 2: &quot;b&quot;, 1: &quot;d&quot; }&#10;#aa,*bcd={4: &quot;a&quot;, 3: &quot;c&quot;, 2: &quot;b&quot;, 1: &quot;d&quot; }&#10;print(a,b,c,d,aa,bcd)&#10;&#10;&#10;&#10;lt=[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]&#10;for [x,y,z] in lt:&#10;    print(&quot;LIST3&quot;,x,y,z)&#10;$END$    " description="my pattern matching list [x,y,z]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list pattern matching2 laHaskell" value="lt=[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]&#10;for [x,*xs] in lt:&#10;    print(&quot;LIST3&quot;,x,xs)&#10;$END$    " description="my pattern matching list [x,xs]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list copy shallow" value="$copy$=$l$[:]" description="NEW  list[:]" toReformat="false" toShortenFQNames="true">
    <variable name="l" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="copy" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list copy deep" value="$copy$=copy.deepcopy($l$)&#10;" description="NEW  deepcopy(list)" toReformat="false" toShortenFQNames="true">
    <variable name="l" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="copy" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="namedtuple immutable class (short)" value="Car =  collections.namedtuple('Car', 'attr1 attr2')&#10;#Car = collections.namedtuple('Car', ['attr1', 'attr2'])&#10;car=Car(1,2)&#10;print(car)&#10;$END$" description="NEW  namedtuple()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list deduplicate elements" value="$l1$=set($list$)&#10;$END$" description="NEW  set" toReformat="false" toShortenFQNames="true">
    <variable name="list" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map get first key" value="next(iter($s$))" description="next(iter)" toReformat="false" toShortenFQNames="true">
    <variable name="s" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list QUEUE BAD" value="queue_=[]&#10;queue_[:0] = [12]   # push=enque&#10;v = queue_.pop()    # pop =deque" description="NEW  []" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list STACK SUPER" value="stack=[11]&#10;stack+=[vertex] # push&#10;obj = stack.pop() # pop&#10;&#10;while obj:=stack.pop() if stack else None:&#10;    print(obj)&#10;    # stack +=[12]&#10;" description="NEW  []" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map WITH DEFAULT  VALUES" value="# все создаваемые entry будут иметь value по-умолчанию (например -массив )&#10;# !! предостережение - каждое получение ненайденного элемента создает его &#10;dd=collections.defaultdict(list) &#10;dd=collections.defaultdict(lambda: []) &#10;dd[1]+=[1,2]&#10;print(dd)" description="defaultdict( all default values=[] )" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list HEAP how to use" value="heap=[]&#10;heapq.heappush(heap, (5, 'write code'))&#10;obj =  heapq.heappop(heap)     # pop возвращает наименьший элемент&#10;obj = heap[0]             # это самый маленький элемент, без удаления &#10; &#10;# heapq.heapify(list) - сам список будет МУТИРОВАН!!" description="NEW  [] priority queue" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list HEAPQ with class for entry 2" value="class Entry():&#10;    def __init__(self, key, value):&#10;        self.key = key&#10;        self.value = value&#10;&#10;    def __lt__(self, other):&#10;        return self.value &lt; other.value&#10;&#10;    def __repr__(self):&#10;        return f&quot;{self.key}-{self.value}&quot;&#10;&#10;&#10;heap, heap_dict = [], {}&#10;&#10;&#10;def push(key, value):&#10;    entry = Entry(value, key)  # ordering element goes first&#10;    heapq.heappush(heap, entry)&#10;    heap_dict[key] = entry&#10;&#10;def pop(): return heapq.heappop(heap)&#10;&#10;push(5, 10)&#10;push(6, 9)&#10;print(&quot;heap=&quot;, heap)&#10;print(&quot;heap=&quot;, pop())" description="NEW  [class sorted by value]  {class hashed by key}" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="set intersect" value="$l1$=$list$&amp;$list2$&#10;$END$" description="{a,b}&amp;{c,d}  только элементы которые есть в обоих множествах" toReformat="false" toShortenFQNames="true">
    <variable name="list" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="list2" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="set MINUS" value="$l1$=$list$-$list2$&#10;$END$" description="{a,b}-{c,d}  вычесть из одного мнодества другое" toReformat="false" toShortenFQNames="true">
    <variable name="list" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="list2" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="l1" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list QUEUE PRIORITY CONCURRENT blocking" value="import queue # SimpleQueue PriorityQueue LifoQueue &#10;&#10;# то же самое что и heapq но только многопоточное&#10;# можно сделать заданного размера, и тогда очередь заблокируется при полном заполнении&#10;pq = queue.PriorityQueue()&#10;pq.put(10)&#10;pq.put(9)&#10;pq.put(8)&#10;&#10;print(&quot;priority queue&quot;,pq.get())" description="standart queue.PriorityQueue" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list HEAPQ with class for entry 1" value="from dataclasses import dataclass, field&#10;&#10;@dataclasses.dataclass(order=True)&#10;class Entry():&#10;    key: int&#10;    value: Any = dataclasses.field(compare=False)&#10;&#10;heap, heap_dict = [], {}&#10;&#10;def push(key, value):&#10;    entry = Entry(key, value)  # ordering element goes first&#10;    heapq.heappush(heap, entry)&#10;    heap_dict[key] = entry&#10;&#10;def pop(): return heapq.heappop(heap)&#10;&#10;push(5, 10)&#10;push(6, 9)&#10;print(&quot;heap=&quot;, heap)&#10;print(&quot;heap=&quot;, pop())" description="use @dataclass annotation" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map new DICT of DICTs" value="result = collections.defaultdict(lambda:collections.defaultdict(lambda:math.inf))&#10;parents = collections.defaultdict(lambda:collections.defaultdict(lambda:None))&#10;# !! предостережение - каждое получение ненайденного элемента создает его " description="defaultdict(defaultdict)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="set intersect (super)" value="range_ = set(range(len(pts))) &amp; set(range(idx - 3, idx + 5)) - {idx}&#10;pts_d = map(pts.__getitem__, range_)&#10;# как вариант functools.partial(operator.getitem, arr)&#10; &#10;    &#10;# take 4 left points, if possible&#10;cnt = 4&#10;while (cnt := cnt - 1) &gt;= 0 and idx1 &gt; 0:&#10;    idx1 -= 1&#10;&#10;# take 4 right points, if possible&#10;cnt = 4&#10;while (cnt := cnt - 1) &gt;= 0 and idx2 &lt; len(pts) - 1:&#10;    idx2 += 1&#10;pts_delta = pts[idx1: idx] + pts[idx + 1:idx2 + 1]" description="set(range(len(pts))) &amp; set(range(idx - 3, idx + 5))   вместо инкрементальных приращений индекса" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map new CACHE самописка" value="cache = {}&#10;def someproc(val1,val2):&#10;    if seen := cache.get((val1, val2)): return seen&#10;    #get result&#10;    cache[(val1, val2)] = result&#10;    return result&#10;&#10; " description="f seen := cache.get((val1, val2)): return seen" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map new CACHE SUPER" value="@functools.lru_cache&#10;&#10; " description="@functools.lru_cache" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list range в обратном порядке по массиву" value="range(N-1,-1,-1)" description="range(N-1,-1,-1)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map mutable-&gt;immutable" value="tuple($l1$.items())" description="tuple(map.items())" toReformat="false" toShortenFQNames="true">
    <variable name="l1" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list QUEUE SUPER" value="queue =collections.deque([11])&#10;queue.appendLeft(12)   # push=enque&#10;v = queue.pop()    # pop =deque&#10;&#10;while obj:=queue.pop() if queue else None:&#10;    print(obj)&#10;    # queue.appendLeft(12)" description="deque()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map STACK" value="map = {&#10;    1: 1,&#10;    2: 2,&#10;    3: 3,&#10;    4: 4&#10;}&#10;map1 = collections.OrderedDict(map)&#10;print(map1.popitem())  # LIFO queue&#10;print(map1.popitem(last=False))  # FIFO stacke" description="OrderedDict(map)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list range в обратном порядке по массиву SUPER" value="reversed(range(N))" description="reversed(range(N))" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map new COUNTER" value="counter_map = collections.Counter(nums)" description="collections.Counter(nums)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map new from list with indexes" value="$che$ = {key: idx for idx, key in enumerate($nums$)}&#10;&#10; " description="{ key:idx }" toReformat="false" toShortenFQNames="true">
    <variable name="nums" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="che" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="list GROUP BY KEY" value="vehicles = [('Ford', 'Taurus'), ('Dodge', 'Durango'), ('Chevrolet', 'Cobalt'), ('Ford', 'F150'), ('Dodge', 'Charger'), ('Ford', 'GT')]&#10;sorted_vehicles = sorted(vehicles)&#10;groups = itertools.groupby(sorted_vehicles, operator.itemgetter(0))&#10;&#10;for key, value in groups:&#10;    print(&quot;___&quot;)&#10;    for left, right in value:&#10;        print(left, right)&#10;&#10;&quot;&quot;&quot;&#10;___&#10;Chevrolet Cobalt&#10;___&#10;Dodge Charger&#10;Dodge Durango&#10;___&#10;Ford F150&#10;Ford GT&#10;Ford Taurus&#10;&quot;&quot;&quot;&#10;" description="groupby" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="map GROUP BY KEY" value="m1 = {&#10;    'music': 'bach',&#10;    'art': 'rembrandt'&#10;}&#10;m2 = {&#10;    'art': 'van gogh',&#10;    'opera': 'carmen'&#10;}&#10;&#10;&#10;def group_dicts(dict_left, dict_right):&#10;    merged = collections.defaultdict(list)&#10;    for key, value in itertools.chain(m1.items(), m2.items()):&#10;        merged[key] += [value]&#10;    return merged&#10;&#10;&#10;print(&quot;RESULT=&quot;, group_dicts(m1, m2))&#10;" description="new dict" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>