<templateSet group="_MATH">
  <template name="new int INFINITE NUMBER" value="math.inf&#10;#print (min(12,3,inf))" description="math.inf" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for MIN by key(of iterable object)" value="min([pt1, pt2, pt3], key=lambda x:x[0])" description="min(key=)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for SORT by key LIST" value="$P$.sort(key=lambda x:x[0])" description="sort(key=)" toReformat="false" toShortenFQNames="true">
    <variable name="P" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func random integer" value="random.randint(1,10) #   [1,10]" description="randint(1,10) #   [1,10]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="if ODD or EVEN  middle of integers" value="middle =  ((b-a)//2)-1 if (b-a)%2==0 else (b-a)//2" description="if (b-a)%2==0" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap SORT by value DICT" value="meta1=sorted(meta.items(), key=lambda e:e[1])" description="sorted(items()  key=lambda)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap SORT by value DICT 2" value="nsmallest(len(result), result.items(), key=lambda e:e[1])" description="nsmallest" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap SORT by value DICT get only keys" value="result2 = [k for k, v in sorted(result.items(), key=lambda e:e[1])]" description="sorted(items()  key=lambda)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func counter NEXT INTEGER NUMBER" value="counter = itertools.count()     # unique sequence count&#10;count = next(counter)" description="itertools.count" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap MIN by key DICT" value="costs = dict(a=1)#dict(a=1,b=2,c=3)&#10;processed ={&quot;a&quot;}&#10;vertex, _ = min(costs.items(), key=lambda e:e[1] if e[0] not in processed else inf)&#10;print (vertex)" description="min(key=)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="formap SWAP values and keys" value="p = {v:k for k, v in $parents$.items()}" description="{v:k}" toReformat="false" toShortenFQNames="true">
    <variable name="parents" expression="pyIterableVariable()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func log2" value="math.log2(x)" description="log2 log10" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func округление" value="// усекает книзу&#10;math.trunc() # усечение, отбросить дробную часть&#10;math.floor() # округлить к низу&#10;math.round(2.65) # округлить до 2&#10;math.round(2.65, 1) # округлить до 2.6&#10;" description="trunc/floor/round" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for комбинаторика Декартово произведение" value="arr1 = &quot;abcd&quot;&#10;arr2 = [1, 2, 3, 4]&#10;for x, y in itertools.product(arr1,arr2):&#10;    print (x,y)" description="itertools.product" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for комбинаторика Permutations Перестановки (Accomodations  Размещения)" value="# n! == math.factorial(n)  permutations&#10;# n! / (n-m)! == math.perm(n,k) accomodations&#10;arr1 = &quot;abcd&quot;&#10;for x, y in itertools.permutations(arr1,2):&#10;    print (x,y)&#10;&quot;&quot;&quot;&#10;a b&#10;a c&#10;a d&#10;b a&#10;b c&#10;b d&#10;c a&#10;c b&#10;c d&#10;d a&#10;d b&#10;d c&#10;&quot;&quot;&quot;" description="itertools.permutations  теже самые объекты переставляются (выбираем объекты по 2 а еще и переставляем внутри 2-ойки)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="for комбинаторика Combinations сочетания" value="# n! / (n-m)!m!&#10;arr1 = &quot;abcd&quot;&#10;for x, y in itertools.combinations(arr1,2):&#10;    print (x,y)&#10;&quot;&quot;&quot;&#10;a b&#10;a c&#10;a d&#10;b c&#10;b d&#10;c d&#10;&quot;&quot;&quot;" description="itertools.combinations выбираем по 2 элемента (порядок не важен)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="func random element from list" value="random.choise(arr)" description="choise(arr)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>