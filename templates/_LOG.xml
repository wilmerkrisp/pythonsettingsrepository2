<templateSet group="_LOG">
  <template name="print enhansed" value="print(&quot;ovan&quot;,&quot;alsu$END$&quot;,sep=&quot;,&quot;,end=&quot; &quot;)" description="print FULL" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="pring &quot;&quot;" value="print(&quot;$END$&quot;)" description="print()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print (&quot;&quot;,var)" value="print(&quot;&gt;&gt;&quot;,$varr$ $END$)" description="print (,,,)" toReformat="false" toShortenFQNames="true">
    <variable name="varr" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print (f&quot;&gt;&gt; {var}&quot;)" value="print(f&quot;&gt;&gt; {$varr$}&quot;)&#10;$END$" description="print formatted" toReformat="false" toShortenFQNames="true">
    <variable name="varr" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print Solution" value="print(&quot;solution=&quot;,Solution().$meth$($END$))&#10;" description="print()" toReformat="false" toShortenFQNames="true">
    <variable name="meth" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print inner list MATRIX TABLE" value="def print_matrix1(list_of_lists):&#10;    &quot;&quot;&quot; печать матрицы [x][y] &quot;&quot;&quot;&#10;    lx, ly = len(list_of_lists), len(list_of_lists[0])&#10;    for y in range(ly):&#10;        for x in range(lx):&#10;            print(list_of_lists[x][y], end=&quot;\t&quot;)&#10;        print(&quot;\n&quot;)&#10;&#10;def print_matrix2(list_of_lists):&#10;    # печать матрицы просто как есть&#10;    for y in list_of_lists:&#10;        for x in y:&#10;            print(x, end=&quot;\t&quot;)&#10;        print(&quot;\n&quot;)" description="for for print" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print linked list v1" value="def linked_list_to_string(linked_list):&#10;    &quot;&quot;&quot; linked list to string&quot;&quot;&quot;&#10;    list_repr = []&#10;&#10;    node = linked_list&#10;    while node:  # because size is a count of elements&#10;        list_repr += [node]&#10;        node = node.next&#10;&#10;    return str(list_repr)&#10;&#10;&#10;def print_linked_list(linked_list):&#10;    &quot;&quot;&quot; print linked list &quot;&quot;&quot;&#10;    print(linked_list_to_string(linked_list))" description="simple print" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print graph  undirected DRAW with labels v1" value="import networkx as nx&#10;import matplotlib.pyplot as plt&#10;&#10;&#10;&#10;def draw_graph(graph, labels_=None):&#10;    &quot;&quot;&quot;graph_directed = {&#10;        1:[2, 3],&#10;        2:[3, 4],&#10;        3:[4],&#10;        4:[]}&quot;&quot;&quot;&#10;    if not labels_: labels_ = {}&#10;&#10;    g = nx.DiGraph()&#10;&#10;    for v in graph:&#10;        g.add_node(v)&#10;        label_additional = labels_.get(v, &quot;&quot;);&#10;        labels_[v] = f&quot;{v}  *{label_additional}*&quot;&#10;        for e in graph[v]:&#10;            try:&#10;                g.add_edge(v, e, w=graph[v][e])&#10;            except TypeError as error:&#10;                g.add_edge(v, e)&#10;&#10;    pos = nx.planar_layout(g)&#10;    # pos = nx.spring_layout(g)&#10;    nx.draw_networkx_nodes(g, pos)&#10;&#10;    nx.draw_networkx_labels(g, pos, labels=labels_)&#10;    nx.draw_networkx_edge_labels(g, pos)&#10;    nx.draw_networkx_edges(g, pos, edge_color='r', arrows=True)&#10;    plt.show()" description="networkx" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print graph  undirected DRAW with labels v2" value="import networkx as nx&#10;import matplotlib.pyplot as plt&#10;&#10;&#10;def draw_graph(graph_matrix, labels_=None):&#10;    &quot;&quot;&quot;graph_directed = {&#10;        1:[2, 3],&#10;        2:[3, 4],&#10;        3:[4],&#10;        4:[]}&quot;&quot;&quot;&#10;    if not labels_:&#10;        labels_ = {}&#10;&#10;    graph = nx.DiGraph()&#10;&#10;    for vertex in graph_matrix:&#10;        graph.add_node(vertex)&#10;        label_additional = labels_.get(vertex, &quot;&quot;)&#10;        labels_[vertex] = f&quot;{vertex}  *{label_additional}*&quot;&#10;        for edges in graph_matrix[vertex]:&#10;            try:&#10;                graph.add_edge(vertex, edges, w=graph_matrix[vertex][edges])&#10;            except (TypeError, IndexError):&#10;                graph.add_edge(vertex, edges)&#10;&#10;    # pos = nx.planar_layout(g)&#10;    pos = nx.spring_layout(graph)&#10;    nx.draw_networkx_nodes(graph, pos)&#10;&#10;    nx.draw_networkx_labels(graph, pos, labels=labels_)&#10;    nx.draw_networkx_edge_labels(graph, pos)&#10;    nx.draw_networkx_edges(graph, pos, edge_color='r', arrows=True)&#10;    plt.show()" description="networkx" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print binary tree v1" value="import networkx as nx&#10;import matplotlib.pyplot as plt&#10;&#10;&#10;&#10;def draw_binary_tree2(tree, labels_=None):&#10;    &quot;&quot;&quot;&#10;    class TreeNode(object):&#10;        def __init__(self, x):&#10;            self.val = x&#10;            self.left = None&#10;            self.right = None&#10;    &quot;&quot;&quot;&#10;    if not labels_:&#10;        labels_ = {&#10;            tree: &quot;ROOT&quot;&#10;        }&#10;&#10;    graph = nx.DiGraph()&#10;&#10;    # graph pre-prder traversal&#10;    stack = [tree]&#10;    while node := stack.pop() if stack else None:&#10;        # add node&#10;        graph.add_node(node)&#10;        label_additional = labels_.get(node, &quot;&quot;)&#10;        labels_[node] = f&quot;{node.val}  *{label_additional}*&quot;&#10;&#10;        if node.left:&#10;            stack += [node.left]&#10;            graph.add_edge(node, node.left, left=&quot;&quot;)  # add edge&#10;        if node.right:&#10;            stack += [node.right]&#10;            graph.add_edge(node, node.right, right=&quot;&quot;)  # add edge&#10;&#10;    pos = nx.planar_layout(graph)&#10;    # pos = nx.spring_layout(graph)&#10;    nx.draw_networkx_nodes(graph, pos)&#10;&#10;    nx.draw_networkx_labels(graph, pos, labels=labels_)&#10;    nx.draw_networkx_edge_labels(graph, pos)&#10;    nx.draw_networkx_edges(graph, pos, edge_color='r', arrows=True)&#10;    plt.show()" description="networkx" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print binary tree v2" value="import binarytree as bt&#10;&#10;def draw_binary_tree(tree, labels_=None):&#10;    &quot;&quot;&quot;&#10;    class TreeNode(object):&#10;        def __init__(self, x):&#10;            self.val = x&#10;            self.left = None&#10;            self.right = None&#10;    &quot;&quot;&quot;&#10;    tree_map = {}&#10;&#10;    # graph pre-prder traversal&#10;    stack = [tree]&#10;    while node := stack.pop() if stack else None:&#10;        # add node&#10;        tree_map[node] = bt.Node(node.val)&#10;&#10;        if node.left:&#10;            stack += [node.left]&#10;        if node.right:&#10;            stack += [node.right]&#10;&#10;    for node, new_node in tree_map.items():&#10;        new_node.left = tree_map.get(node.left)&#10;        new_node.right = tree_map.get(node.right)&#10;&#10;    root = tree_map[tree]&#10;    print(root)" description="binarytree lib" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print linked list v2" value="import networkx as nx&#10;import matplotlib.pyplot as plt&#10;&#10;def draw_linked_list(llist, labels_=None):&#10;    &quot;&quot;&quot;&#10;    class ListNode(object):&#10;        def __init__(self, val):&#10;            self.val = val&#10;            self.prev = None&#10;            self.next = None&#10;    &quot;&quot;&quot;&#10;    if not labels_:&#10;        labels_ = {&#10;            llist: &quot;ROOT&quot;&#10;        }&#10;&#10;    graph = nx.DiGraph()&#10;&#10;    # list traversal&#10;    list_repr = []&#10;&#10;    node, seen = llist, set()&#10;    while node and node not in seen:&#10;        graph.add_node(node)&#10;        label_additional = labels_.get(node, &quot;&quot;)&#10;        labels_[node] = f&quot;{node.val}  *{label_additional}*&quot;&#10;&#10;        if node.next:&#10;            graph.add_edge(node, node.next)&#10;&#10;        seen |= {node}&#10;        node = node.next&#10;&#10;&#10;    # pos = nx.planar_layout(graph)&#10;    pos = nx.spring_layout(graph)&#10;    nx.draw_networkx_nodes(graph, pos)&#10;&#10;    nx.draw_networkx_labels(graph, pos, labels=labels_)&#10;    nx.draw_networkx_edge_labels(graph, pos)&#10;    nx.draw_networkx_edges(graph, pos, edge_color='r', arrows=True)&#10;    plt.show()" description="networkx" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>